@page "/fileuploadwithpreview"
@using System;
@using System.IO;
@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment Environment
@using System.Text;
@using iTextSharp.text.pdf;
@using iTextSharp.text.pdf.parser;
@using DocumentFormat.OpenXml.Packaging;
@using DocumentFormat.OpenXml.Wordprocessing;
@using Newtonsoft.Json;
@using Azure.Storage.Blobs;


<PageTitle>File Upload</PageTitle>

<OverlaySpinner IsLoading=@showLoader></OverlaySpinner>

@if (myJsonFiles == null || myJsonFiles?.FirstOrDefault()?.FileName == null)
{
	<h3>Upload Profile</h3>
	<div class="file-upload-container mb-5">
		<label for="fileInput" class="file-label">Choose Profiles:</label>

		<InputFile id="fileInput" @key="fileInputKey" OnChange="OnFileSelected" multiple class="form-control"
			accept=".pdf,.doc,.docx,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document" />

		@* @if (selectedFiles.Count > 0)
		{
			<div class="file-list">
				@foreach (var file in selectedFiles)
				{
					<div class="file-item">
						<span class="file-name">@file.Name</span>
						<button class="file-remove-btn" @onclick="() => RemoveFile(file)">✖</button>
					</div>
				}
			</div>
		} *@

		@* @if (!string.IsNullOrEmpty(uploadMessage))
		{
			<div class="upload-status @(isUploadSuccess ? "success" : "error")">
				@uploadMessage
			</div>
		} *@
	</div>
}

@if (myJsonFiles != null && myJsonFiles.FirstOrDefault()?.FileName != null)
{
	<h3>Profile Preview</h3>
	<JsonViewer JsonFiles="@myJsonFiles" />
	<div class="buttons-row justify-content-end tab-btn-wrapper mb-5 mt-3">
		<button type="button" class="cancel-btn" @onclick="GoBack">
			Cancel
		</button>
		<button type="button" class="submit-btn" @onclick="UploadFiles" disabled="@isUploading">
			@(isUploading ? "Uploading..." : "Submit")
		</button>
	</div>
}

@if (showPopup)
{
	<div class="popup-overlay-file-upload">
		<div class="popup-content @(isUploadSuccess ? "popup-success" : "popup-error")">
			<div class="popup-icon">
				@if (isUploadSuccess)
				{
					<i class="bi bi-check-circle-fill"></i>
				}
				else
				{
					<i class="bi bi-exclamation-triangle-fill"></i>
				}
			</div>

			<div class="popup-body">
				<div class="popup-message">@popupMessage</div>

				<div class="popup-actions">
					<button class="popup-btn close-btn" @onclick="ClosePopup">Close</button>

					@if (isUploadSuccess)
					{
						<button class="popup-btn navigate-btn" @onclick="NavigateToJDSearch">
							Go to JD Search
						</button>
					}
				</div>
			</div>
		</div>
	</div>
}


<style>
	.file-upload-container {
		width: 100%;
		max-width: 600px;
		background: #f9f9f9;
		border: 1px solid #ddd;
		border-radius: 8px;
		padding: 20px;
		box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
		font-family: 'Segoe UI', sans-serif;
	}

	.buttons-row {
		display: flex;
		flex-direction: row;
		align-items: flex-end;
		padding: 0px;
		gap: 16px;
		width: 100%;
		height: 40px;
		flex: none;
		order: 5;
		flex-grow: 0;
	}

	.json-viewer-container {
		padding: 0px !important;
	}

	.file-label {
		display: block;
		font-weight: 600;
		margin-bottom: 8px;
		color: #333;
	}

	.form-control {
		width: 100%;
		padding: 10px;
		border: 1px solid #ccc;
		border-radius: 6px;
		background: #fff;
		cursor: pointer;
	}

	.file-list {
		margin-top: 15px;
		display: flex;
		flex-direction: column;
		gap: 10px;
	}

	.file-item {
		display: flex;
		justify-content: space-between;
		align-items: center;
		background: #ffffff;
		border: 1px solid #e0e0e0;
		padding: 8px 12px;
		border-radius: 6px;
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
		transition: background 0.2s ease;
	}

	.file-item:hover {
		background: #f1faff;
	}

	.file-name {
		font-size: 14px;
		color: #333;
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;
		flex-grow: 1;
	}

	.file-remove-btn {
		background: none;
		border: none;
		color: #e74c3c;
		font-size: 16px;
		cursor: pointer;
		transition: color 0.2s ease;
	}

	.file-remove-btn:hover {
		color: #c0392b;
	}

	.cancel-btn {
		margin-top: 15px;
		padding: 10px 18px;
		font-size: 15px;
		font-weight: 600;
		color: white;
		background-color: #5c636a;
		border: none;
		border-radius: 6px;
		cursor: pointer;
		transition: background-color 0.2s ease;
	}

	.submit-btn {
		margin-top: 15px;
		padding: 10px 18px;
		font-size: 15px;
		font-weight: 600;
		color: white;
		background-color: #007acc;
		border: none;
		border-radius: 6px;
		cursor: pointer;
		transition: background-color 0.2s ease;
	}

	.submit-btn:disabled {
		background-color: #a0a0a0;
		cursor: not-allowed;
	}

	.submit-btn:hover:not(:disabled) {
		background-color: #005a9e;
	}

	.upload-result {
		margin-top: 12px;
		font-size: 14px;
		font-weight: 500;
		color: #333;
	}

	
.popup-overlay-file-upload {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.45);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10000;
}

.popup-content {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
    gap: 24px;
    background: #fff;
    padding: 45px 50px; /* ⬆️ Increased padding for more height */
    border-radius: 16px;
    box-shadow: 0 6px 28px rgba(0, 0, 0, 0.25);
    font-family: 'Segoe UI', sans-serif;
    width: 50%; /* 50% width as before */
    max-width: 700px;
    min-width: 480px;
    min-height: 220px; /* ⬆️ Added min height for better visual balance */
    animation: fadeIn 0.3s ease-in-out;
}

.popup-success {
    border-left: 8px solid #28a745;
}

.popup-error {
    border-left: 8px solid #dc3545;
}

.popup-icon {
    font-size: 48px;
    flex-shrink: 0;
    margin-top: 10px; /* adds a bit of vertical centering */
}

.popup-success .popup-icon {
    color: #28a745;
}

.popup-error .popup-icon {
    color: #dc3545;
}

.popup-body {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center; /* ensures content is centered vertically */
    gap: 24px; /* ⬆️ Slightly increased spacing for a more open look */
    width: 100%;
}

.popup-message {
    font-size: 18px;
    font-weight: 500;
    color: #333;
    text-align: center;
}

.popup-actions {
    display: flex;
    justify-content: center;
    gap: 16px;
}

.popup-btn {
    padding: 10px 22px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 600;
    font-size: 15px;
    transition: all 0.2s ease;
}

.close-btn {
    background-color: #6c757d;
    color: white;
}

.close-btn:hover {
    background-color: #5a6268;
}

.navigate-btn {
    background-color: #007bff;
    color: white;
}

.navigate-btn:hover {
    background-color: #0056b3;
}
</style>


@code {
	private bool showLoader = false;
	private List<IBrowserFile> selectedFiles = new();
	private List<JsonViewer.JsonFileModel> myJsonFiles = new List<JsonViewer.JsonFileModel>();
	private List<(string FileName, byte[] Bytes)> uploadedFileBytes = new();
	private Guid fileInputKey = Guid.NewGuid(); // unique key for InputFile
	private string? previewUrl;
	private string? errorMessage;
	private string? successMessage;
	private long maxFileSize = 10 * 1024 * 1024; // 10 MB
	public BlobServiceClient _blobServiceClient;
	[Inject]
	public IConfiguration _configuration { get; set; }
	private bool isUploading = false;

	private string? uploadMessage;
	private bool showPopup = false;
	private bool isUploadSuccess = false;
	private string popupMessage = string.Empty;

	[Inject] private NavigationManager NavigationManager { get; set; }
	protected override async Task OnInitializedAsync()
	{
		// Get the connection string from configuration
		var azureConnectionString = _configuration.GetSection("AzureBlobStorage")["ConnectionString"];
		_blobServiceClient = new BlobServiceClient(azureConnectionString);
	}

	private void ShowPopup(string message, bool success)
	{
		popupMessage = message;
		isUploadSuccess = success;
		showPopup = true;
	}

	private void ClosePopup()
	{
		showPopup = false;
	}

	private void NavigateToJDSearch()
	{
		showPopup = false;
		NavigationManager.NavigateTo("/");
	}

	private void ClearFile()
	{
		previewUrl = null;
		errorMessage = null;
		successMessage = null;
	}

	private string FormatFileSize(long bytes)
	{
		string[] sizes = { "B", "KB", "MB", "GB" };
		double len = bytes;
		int order = 0;
		while (len >= 1024 && order < sizes.Length - 1)
		{
			order++;
			len = len / 1024;
		}
		return $"{len:0.##} {sizes[order]}";
	}

	private async Task OnFileSelected(InputFileChangeEventArgs e)
	{
		selectedFiles.Clear();
		uploadedFileBytes.Clear();
		showLoader = true;

		foreach (var file in e.GetMultipleFiles())
		{
			// 🔹 Read and keep bytes in memory now
			using var stream = file.OpenReadStream(maxAllowedSize: 20 * 1024 * 1024);
			using var ms = new MemoryStream();
			await stream.CopyToAsync(ms);
			var fileBytes = ms.ToArray();

			uploadedFileBytes.Add((file.Name, fileBytes));

			// Existing metadata extraction logic
			string base64 = Convert.ToBase64String(fileBytes);
			ExtractMetaDataForResume extractMetaDataForResume = new();
			var metaData = await extractMetaDataForResume.ExtractMetaData(
			IsPdfMime(file) ? ExtractTextFromBase64Pdf(base64) : ReadWordText(new MemoryStream(fileBytes))
			);

			myJsonFiles.Add(new JsonViewer.JsonFileModel
			{
				FileName = file.Name,
				Content = System.Text.Json.JsonSerializer.Serialize(metaData)
			});
		}

		showLoader = false;
		StateHasChanged();
	}

	bool IsPdfMime(IBrowserFile file) =>
	file.ContentType == "application/pdf";

	bool IsDocxMime(IBrowserFile file) =>
	file.ContentType == "application/vnd.openxmlformats-officedocument.wordprocessingml.document";

	private void RemoveFile(IBrowserFile file)
	{
		selectedFiles.Remove(file);

		// 🔄 Refresh InputFile to allow re-uploading same file name again
		fileInputKey = Guid.NewGuid();
	}

	private async Task<byte[]> ReadFileBytesAsync(IBrowserFile file)
	{
		const long maxFileSize = 20 * 1024 * 1024; // 20 MB limit, adjust as needed

		using var stream = file.OpenReadStream(maxAllowedSize: maxFileSize);
		using var ms = new MemoryStream();
		await stream.CopyToAsync(ms);
		return ms.ToArray(); // raw file bytes
	}

	public string ExtractTextFromBase64Pdf(string base64Pdf)
	{
		byte[] pdfBytes = Convert.FromBase64String(base64Pdf);

		using var ms = new MemoryStream(pdfBytes);
		using var reader = new PdfReader(ms);
		var text = new StringBuilder();

		for (int i = 1; i <= reader.NumberOfPages; i++)
		{
			string pageText = PdfTextExtractor.GetTextFromPage(reader, i);
			text.AppendLine(pageText);
		}
		return text.ToString();
	}

	public static string ReadWordText(Stream docxStream)
	{
		StringBuilder text = new StringBuilder();
		using (var wordDoc = WordprocessingDocument.Open(docxStream, false))
		{
			var body = wordDoc.MainDocumentPart.Document.Body;
			text.Append(body.InnerText);
		}
		return text.ToString();
	}

	private async Task GoBack()
	{
		showLoader = true;
		myJsonFiles = new List<JsonViewer.JsonFileModel>();
		selectedFiles.Clear();
		uploadedFileBytes.Clear();
		showLoader = false;
	}

	private async Task UploadFiles()
	{
		showLoader = true;
		isUploading = true;

		try
		{
			var containerClient = _blobServiceClient.GetBlobContainerClient("resumes");
			await containerClient.CreateIfNotExistsAsync();

			// Upload each file
			foreach (var file in uploadedFileBytes)
			{
				var blobClient = containerClient.GetBlobClient(file.FileName);
				using var ms = new MemoryStream(file.Bytes);
				await blobClient.UploadAsync(ms, overwrite: true);
			}

			myJsonFiles.Clear();
			selectedFiles.Clear();
			uploadedFileBytes.Clear();

			ShowPopup("Files uploaded successfully!", true);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Upload failed: {ex}");
			// ⚠ Show error popup with exception message
			ShowPopup($"Upload failed: {ex.Message}", false);
		}
		finally
		{
			showLoader = false;
			isUploading = false;
		}
	}

}