@page "/fileuploader"
@inject SentimentService MySentimentService
@using Azure.Storage.Blobs;
@using Microsoft.AspNetCore.Components;

<OverlaySpinner IsLoading=@showLoader></OverlaySpinner>
<RadzenCard Variant="Variant.Outlined">
    <h3>Upload Resumes</h3>
    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Select files to upload </RadzenText>
    @if (!clearInputFile)
    {
        <InputFile OnChange="@HandleFileSelection" class="form-control"
        multiple accept=".pdf,.doc,.docx,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document" />
    }
</RadzenCard>

<button class="btn btn-primary" @onclick="@UploadFiles">Upload Resumes</button>

<RadzenLabel Text="Successfully Uploaded the file(s)" Visible="@hideMsg"/> 

<EventConsole @ref=@console />

@code {
    EventConsole console;
    private bool showLoader = false;
    private bool hideMsg = false;
    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    private bool clearInputFile = false;
    public BlobServiceClient _blobServiceClient;
     [Inject]
    public IConfiguration _configuration { get; set; }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        selectedFiles.Clear();
        showLoader = true;
        foreach (var file in e.GetMultipleFiles())
        {
            selectedFiles.Add(file);
        }
        if (selectedFiles == null || selectedFiles.Count == 0)
        {
            return ;
        }
        
        showLoader = false;
    }
    private async Task UploadFiles(){
        var containerClient = _blobServiceClient.GetBlobContainerClient("resumes");
        await containerClient.CreateIfNotExistsAsync();
        var uploadedFiles = new List<object>();

        foreach (var file in selectedFiles)
        {
            var blobClient = containerClient.GetBlobClient(file.Name);
            await blobClient.UploadAsync(file.OpenReadStream(), true);
            uploadedFiles.Add(new { FileName = file.Name, BlobUrl = blobClient.Uri });
        }
        hideMsg = true;
        return;
    }
    protected override async Task OnInitializedAsync()
    {
        
        // Get the connection string from configuration
        var azureConnectionString = _configuration.GetSection("AzureBlobStorage")["ConnectionString"];
        _blobServiceClient = new BlobServiceClient(azureConnectionString);
        showLoader = false;
    }
   
    private void ClearInputFile()
    {
        hideMsg = false;
        clearInputFile = true;
        StateHasChanged(); // Force re-render to hide
        clearInputFile = false;
        StateHasChanged(); // Force re-render to show (cleared)
    }
}
